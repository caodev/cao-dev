<?php
// $Id: curlypage.install,v 1.2.2.4.2.5 2010/06/29 11:47:29 manfer Exp $

/**
 * @file
 * Install file.
 */

define('CURLYPAGE_PATH_IMAGES', 'curlypage');

/**
 * Implementation of hook_install().
 */
function curlypage_install() {

  drupal_install_schema('curlypage');

  // if this is an upgrade from pageear module, import pageears
  // otherwise insert a sample curlypage
  if (module_exists('pageear')) {

    // Import pageears
    $pageears = array();
    $num_enabled_curlypages = 0;

    $pageears = db_query("SELECT * FROM {pageears} ORDER BY peid ASC");
    while ($pageear = db_fetch_object($pageears)) {

      $curlypage->cpid = $pageear->peid;
      $curlypage->status = $pageear->status;

      if ($curlypage->status) {
        $num_enabled_curlypages++;
      }

      $curlypage->name = $pageear->name;
      $curlypage->peel_position = $pageear->peelPosition;

      $directory_path = file_directory_path() .'/'. CURLYPAGE_PATH_IMAGES;
      // checks if directory exist and creates it if it don't
      file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'file_directory_path');

      $source_path = $pageear->smallURL;
      $parts = explode(".", $source_path);
      $extension = $parts[count($parts)-1];
      $dest_path = $directory_path .'/small_url_'. $pageear->peid .'.'. $extension;
      file_copy($source_path, $dest_path);
      $curlypage->small_url = $dest_path;

      $source_path = $pageear->bigURL;
      $parts = explode(".", $source_path);
      $extension = $parts[count($parts)-1];
      $dest_path = $directory_path .'/big_url_'. $pageear->peid .'.'. $extension;
      file_copy($source_path, $dest_path);
      $curlypage->big_url = $dest_path;

      $curlypage->mirror = $pageear->mirror;
      $curlypage->in_transition = $pageear->inTransition;
      $curlypage->transition_duration = $pageear->transitionDuration;
      $curlypage->peel_color = $pageear->peelColor;
      $curlypage->red_value = $pageear->redValue;
      $curlypage->green_value = $pageear->greenValue;
      $curlypage->blue_value = $pageear->blueValue;
      $curlypage->link_target = $pageear->linkTarget;
      $curlypage->link = $pageear->link;

      if ($pageear->loadSoundURL == '') {
        $curlypage->load_sound_url = '';
      }
      else {
        $source_path = $pageear->loadSoundURL;
        $dest_path = $directory_path .'/load_sound_url_'. $pageear->peid .'.mp3';
        file_copy($source_path, $dest_path);
        $curlypage->load_sound_url = $dest_path;
      }

      if ($pageear->openSoundURL == '') {
        $curlypage->open_sound_url = '';
      }
      else {
        $source_path = $pageear->openSoundURL;
        $dest_path = $directory_path .'/open_sound_url_'. $pageear->peid .'.mp3';
        file_copy($source_path, $dest_path);
        $curlypage->open_sound_url = $dest_path;
      }

      if ($pageear->closeSoundURL == '') {
        $curlypage->close_sound_url = '';
      }
      else {
        $source_path = $pageear->closeSoundURL;
        $dest_path = $directory_path .'/close_sound_url_'. $pageear->peid .'.mp3';
        file_copy($source_path, $dest_path);
        $curlypage->close_sound_url = $dest_path;
      }

      $curlypage->flag_speed = $pageear->flagSpeed;
      $curlypage->peel_speed = $pageear->peelSpeed;
      $curlypage->automatic_open = $pageear->automaticOpen;
      $curlypage->automatic_close = $pageear->automaticClose;
      $curlypage->close_button_enable = $pageear->close_button_enable;
      $curlypage->text_on_close_button = $pageear->text_on_close_button;
      $curlypage->close_red_value = $pageear->close_redValue;
      $curlypage->close_green_value = $pageear->close_greenValue;
      $curlypage->close_blue_value = $pageear->close_blueValue;
      $curlypage->languages = array_filter(explode(',', $pageear->languages));
      $curlypage->roles = array_filter(explode(',', $pageear->roles));
      $curlypage->visibility = $pageear->visibility;
      $curlypage->pages = $pageear->pages;
      $curlypage->flag_width = $pageear->flagWidth ? $pageear->flagWidth : 100;
      $curlypage->flag_height = $pageear->flagHeight ? $pageear->flagHeight : 100;
      $curlypage->peel_width = $pageear->peelWidth ? $pageear->peelWidth : 500;
      $curlypage->peel_height = $pageear->peelHeight ? $pageear->peelHeight : 500;
      $curlypage->flag_style = $pageear->flagStyle ? $pageear->flagStyle : 'style1';
      $curlypage->peel_style = $pageear->peelStyle ? $pageear->peelStyle : 'style1';
      $curlypage->peel_color_style = $pageear->peelColorStyle ? $pageear->peelColorStyle : 'gradient';
      $curlypage->weight = $pageear->weight ? $pageear->weight : 0;
      $curlypage->link_enabled = $pageear->linkEnabled ? $pageear->linkEnabled : 1;
      $curlypage->peel_position_model = $pageear->peelPositionModel ? $pageear->peelPositionModel : 'absolute';
      $curlypage->wait_enable = $pageear->waitEnable ? $pageear->waitEnable : 0;

      if ($pageear->waitURL) {
        $source_path = $pageear->waitURL;
        $parts = explode(".", $source_path);
        $extension = $parts[count($parts)-1];
        $dest_path = $directory_path .'/wait_url_'. $pageear->peid .'.'. $extension;
        file_copy($source_path, $dest_path);
        $curlypage->wait_url = $dest_path;
      }
      else {
        $curlypage->wait_url = drupal_get_path('module', 'curlypage') .'/curlypage/wait.gif';
      }

      $curlypage->wait_width = $pageear->waitWidth ? $pageear->waitWidth : 42;
      $curlypage->wait_height = $pageear->waitHeight ? $pageear->waitHeight : 42;

      _db_insert_curlypage($curlypage);
      _db_insert_curlypage_languages($curlypage->cpid, $curlypage->languages);
      _db_insert_curlypage_roles($curlypage->cpid, $curlypage->roles);
    }

    variable_set('num_enabled_curlypages', $num_enabled_curlypages);
    module_disable(array('pageear'));

  }
  else {
    // Insert an example curlypage
    _db_insert_curlypage();
  }

}


function _db_insert_curlypage($curlypage = NULL) {

  $sql = "INSERT INTO {curlypages} (status, name, peel_position, small_url, big_url, mirror, in_transition, transition_duration, peel_color, red_value, green_value, blue_value, link_target, link, load_sound_url, open_sound_url, close_sound_url, flag_speed, peel_speed, automatic_open, automatic_close, close_button_enable, text_on_close_button, close_red_value, close_green_value, close_blue_value, visibility, pages, flag_width, flag_height, peel_width, peel_height, flag_style, peel_style, peel_color_style, weight, link_enabled, peel_position_model, wait_enable, wait_url, wait_width, wait_height, roles_visibility, curlypage_group, delay, time_slot, repeat_times, open_onclick)";
  $sql .= " VALUES (%d, '%s', '%s', '%s', '%s', %d, '%s', %d, '%s', %d, %d, %d, '%s', '%s', '%s', '%s', '%s', %d, %d, %d, %d, %d, '%s', %d, %d, %d, %d, '%s', %d, %d, %d, %d, '%s', '%s', '%s', %d, %d, '%s', %d, '%s', %d, %d, %d, %d, %d, %d, %d, %d)";
  $result = db_query($sql,
    array(
      ':status' => isset($curlypage->status) ? $curlypage->status : 0,
      ':name' => isset($curlypage->name) ? $curlypage->name : 'drupal',
      ':peel_position' => isset($curlypage->peel_position) ? $curlypage->peel_position : 'topright',
      ':small_url' => isset($curlypage->small_url) ? $curlypage->small_url : drupal_get_path('module', 'curlypage') .'/curlypage/small.jpg',
      ':big_url' => isset($curlypage->big_url) ? $curlypage->big_url : drupal_get_path('module', 'curlypage') .'/curlypage/big.jpg',
      ':mirror' => isset($curlypage->mirror) ? $curlypage->mirror : 1,
      ':in_transition' => isset($curlypage->in_transition) ? $curlypage->in_transition : 'none',
      ':transition_duration' => isset($curlypage->transition_duration) ? $curlypage->transition_duration : 4,
      ':peel_color' => isset($curlypage->peel_color) ? $curlypage->peel_color : 'custom',
      ':red_value' => isset($curlypage->red_value) ? $curlypage->red_value : 255,
      ':green_value' => isset($curlypage->green_value) ? $curlypage->green_value : 255,
      ':blue_value' => isset($curlypage->blue_value) ? $curlypage->blue_value : 255,
      ':link_target' => isset($curlypage->link_target) ? $curlypage->link_target : '_blank',
      ':link' => isset($curlypage->link) ? $curlypage->link : 'http://www.drupal.org/',
      ':load_sound_url' => isset($curlypage->load_sound_url) ? $curlypage->load_sound_url : '',
      ':open_sound_url' => isset($curlypage->open_sound_url) ? $curlypage->open_sound_url : '',
      ':close_sound_url' => isset($curlypage->close_sound_url) ? $curlypage->close_sound_url : '',
      ':flag_speed' => isset($curlypage->flag_speed) ? $curlypage->flag_speed : 4,
      ':peel_speed' => isset($curlypage->peel_speed) ? $curlypage->peel_speed : 4,
      ':automatic_open' => isset($curlypage->automatic_open) ? $curlypage->automatic_open : 0,
      ':automatic_close' => isset($curlypage->automatic_close) ? $curlypage->automatic_close : 0,
      ':close_button_enable' => isset($curlypage->close_button_enable) ? $curlypage->close_button_enable : 0,
      ':text_on_close_button' => isset($curlypage->text_on_close_button) ? $curlypage->text_on_close_button : 'close',
      ':close_red_value' => isset($curlypage->close_red_value) ? $curlypage->close_red_value : 100,
      ':close_green_value' => isset($curlypage->close_green_value) ? $curlypage->close_green_value : 100,
      ':close_blue_value' => isset($curlypage->close_blue_value) ? $curlypage->close_blue_value : 100,
      ':visibility' => isset($curlypage->visibility) ? $curlypage->visibility : 0,
      ':pages' => isset($curlypage->pages) ? $curlypage->pages : '',
      ':flag_width' => isset($curlypage->flag_width) ? $curlypage->flag_width : 100,
      ':flag_height' => isset($curlypage->flag_height) ? $curlypage->flag_height : 100,
      ':peel_width' => isset($curlypage->peel_width) ? $curlypage->peel_width : 500,
      ':peel_height' => isset($curlypage->peel_height) ? $curlypage->peel_height : 500,
      ':flag_style' => isset($curlypage->flag_style) ? $curlypage->flag_style : 'style1',
      ':peel_style' => isset($curlypage->peel_style) ? $curlypage->peel_style : 'style1',
      ':peel_color_style' => isset($curlypage->peel_color_style) ? $curlypage->peel_color_style : 'gradient',
      ':weight' => isset($curlypage->weight) ? $curlypage->weight : 0,
      ':link_enabled' => isset($curlypage->link_enabled) ? $curlypage->link_enabled : 1,
      ':peel_position_model' => isset($curlypage->peel_position_model) ? $curlypage->peel_position_model : 'absolute',
      ':wait_enable' => isset($curlypage->wait_enable) ? $curlypage->wait_enable : 0,
      ':wait_url' => isset($curlypage->wait_url) ? $curlypage->wait_url : drupal_get_path('module', 'curlypage') .'/curlypage/wait.gif',
      ':wait_width' => isset($curlypage->wait_width) ? $curlypage->wait_width : 42,
      ':wait_height' => isset($curlypage->wait_height) ? $curlypage->wait_height : 42,
      ':roles_visibility' => 0,
      ':curlypage_group' => 0,
      ':delay' => 0,
      ':time_slot' => 0,
      ':repeat_times' => 1,
      ':open_onclick' => 0,
    ));

}

function _db_insert_curlypage_languages($cpid, $languages = array()) {
  foreach ($languages as $language) {
    db_query("INSERT INTO {curlypage_languages} (cpid, language) VALUES (%d, '%s')", array(':cpid' => $cpid, ':language' => $language));
  }
}

function _db_insert_curlypage_roles($cpid, $roles = array()) {
  foreach ($roles as $role) {
    db_query("INSERT INTO {curlypage_roles} (cpid, rid) VALUES (%d, %d)", array(':cpid' => $cpid, ':rid' => $role));
  }
}

/**
 * Implementation of hook_disable().
 */
function curlypage_disable() {
  // Disable all enabled curlypages if the module is disabled.
  db_query("UPDATE {curlypages} SET status = %d WHERE status = %d", 0, 1);

  // Update the persistent variable num_enabled_curlypages that tracks number of curlypages enabled
  variable_set('num_enabled_curlypages', 0);
}

/**
 * Deletes images and sounds used by curlypages.
 */
function _curlypage_delete_all_images_sounds() {

  $dir = file_directory_path() .'/'. CURLYPAGE_PATH_IMAGES;
  // if the directory where files reside does not exists nothing to do
  if (!file_check_directory($dir)) {
    return;
  }

  file_scan_directory($dir, '.*', array('.', '..', 'CVS'), 'file_delete', TRUE);

}

/**
 * Implementation of hook_uninstall().
 */
function curlypage_uninstall() {
  // Delete all images and sounds used by curlypage
  _curlypage_delete_all_images_sounds();
  // Delete persistent variables.
  $variables = array(
    'num_enabled_curlypages',
    'curlypage_media_textfields',
    'curlypage_external_swfobject',
    'curlypage_swfobject_path',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
  // Drop the associated schema(s).
  drupal_uninstall_schema('curlypage');
}

/**
 * Implementation of hook_schema().
 */
function curlypage_schema() {
  $schema['curlypages'] = array(
    'description' => 'Stores curlypage settings.',
    'fields' => array(
      'cpid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique curlypage ID.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Pageear enabled status. (1 = enabled, 0 = disabled).',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'Sample Pageear',
        'description' => 'Name of the curlypage. The name will be added to the curlypage class to enable custom theming.',
      ),
      'flag_style' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'style1',
        'description' => 'Style of flag.',
      ),
      'peel_style' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'style1',
        'description' => 'Style of peel.',
      ),
      'peel_position' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => 'topright',
        'description' => 'Position of curlypage. (topleft, topright, bottomleft or bottomright).',
      ),
      'peel_position_model' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
        'default' => 'absolute',
        'description' => 'Position Model of curlypage. (absolute or fixed).',
      ),
      'wait_enable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Wait icon enabled status. (1 = enabled, 0 = disabled).',
      ),
      'wait_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show while the ad is loading.',
      ),
      'wait_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 42,
        'size' => 'normal',
        'description' => 'Width of wait icon.',
      ),
      'wait_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 42,
        'size' => 'normal',
        'description' => 'Height of wait icon.',
      ),
      'flag_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 100,
        'size' => 'normal',
        'description' => 'Width of flag.',
      ),
      'flag_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 100,
        'size' => 'normal',
        'description' => 'Height of flag.',
      ),
      'peel_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 500,
        'size' => 'normal',
        'description' => 'Width of peel.',
      ),
      'peel_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 500,
        'size' => 'normal',
        'description' => 'Height of peel.',
      ),
      'small_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show when the ad is not peeled.',
      ),
      'big_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show when the ad is peeled.',
      ),
      'mirror' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Mirror the ad on the back of the peeled page. (1 = enabled, 0 = disabled).',
      ),
      'in_transition' => array(
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => 'none',
        'description' => 'In Transition when curlypage is loaded.',
      ),
      'transition_duration' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Duration of in transition.',
      ),
      'peel_color_style' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
        'default' => 'gradient',
        'description' => 'The color on peel can be a flat color or a gradient.',
      ),
      'peel_color' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'custom',
        'description' => 'If the mirror effect is disabled, this color will be used on the back.',
      ),
      'red_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Red value of Custom Color for the Peel (0 - 255).',
      ),
      'green_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Green value of Custom Color for the Peel (0 - 255).',
      ),
      'blue_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Blue value of Custom Color for the Peel (0 - 255).',
      ),
      'link_enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Enabled or disabled link. (1 = enabled, 0 = disabled).',
      ),
      'link_target' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => '_blank',
        'description' => 'Where to open the URL.',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'http://www.drupal.org/',
        'description' => 'URL to go when user click on the ad.',
      ),
      'load_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the ad is loaded.',
      ),
      'open_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the peel is opened.',
      ),
      'close_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the peel is closed.',
      ),
      'flag_speed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Speed for the motion in the unpeeled state.',
      ),
      'peel_speed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Speed for the motion in the peeled state.',
      ),
      'automatic_open' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Seconds to unpeel automatically after the curlypage loads.',
      ),
      'automatic_close' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Seconds to automatically close after unpeeling.',
      ),
      'open_onclick' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Open curlypage on click.',
      ),
      'close_button_enable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Show a close button on open peel.',
      ),
      'text_on_close_button' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'close',
        'description' => 'Text on clickable close button.',
      ),
      'close_red_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color red value of close button (0 - 255).',
      ),
      'close_green_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color green value of close button (0 - 255).',
      ),
      'close_blue_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color blue value of close button (0 - 255).',
      ),
      'curlypage_group' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Curlypage group (0 - 100).',
      ),
      'delay' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Delay seconds (0 - 999).',
      ),
      'time_slot' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Time Slot seconds (0 - 999).',
      ),
      'repeat_times' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Repeat times (0 - 9).',
      ),
      'roles_visibility' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Flag to indicate how to show curlypages for roles. (0 = Show for the roles selected, 1 = Show except for the roles selected)',
      ),
      'visibility' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Flag to indicate how to show curlypages on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)',
      ),
      'pages' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Contents of the "Pages" textarea; contains either a list of paths on which to include/exclude the curlypage or PHP code, depending on "visibility" setting.',
      ),
    ),
    'primary key' => array('cpid'),
    'indexes' => array(
      'list' => array('status'),
    ),
  );

  $schema['curlypage_languages'] = array(
    'description' => 'Sets up curlypages visibility based on languages',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'description' => 'The language from {locale}.language.',
      ),
    ),
    'primary key' => array(
      'cpid',
      'language'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'language' => array('language'),
    ),
  );

  $schema['curlypage_roles'] = array(
    'description' => 'Sets up curlypages visibility based on user roles',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.cpid.",
      ),
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
    ),
    'primary key' => array(
      'cpid',
      'rid'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'rid' => array('rid'),
    ),
  );

  $schema['curlypage_node_types'] = array(
    'description' => 'Sets up display criteria for curlypages based on content types',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.cpid.",
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => "The machine-readable name of this type from {node_type}.type.",
      ),
    ),
    'primary key' => array('cpid', 'type'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_update_N().
 */
function curlypage_update_2301() {
  $ret = array();
  db_add_field($ret, 'curlypages', 'roles_visibility', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'description' => 'Flag to indicate how to show curlypages for roles. (0 = Show for the roles selected, 1 = Show except for the roles selected)'));
  return $ret;
}

function curlypage_update_2302() {
  $ret = array();

  // create new tables curlypage_languages and curlypage_roles
  $curlypage_languages_table = array(
    'description' => 'Sets up curlypages visibility based on languages',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'description' => 'The language from {locale}.language.',
      ),
    ),
    'primary key' => array(
      'cpid',
      'language'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'language' => array('language'),
    ),
  );

  $curlypage_roles_table = array(
    'description' => 'Sets up curlypages visibility based on user roles',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.rid.",
      ),
    ),
    'primary key' => array(
      'cpid',
      'rid'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'rid' => array('rid'),
    ),
  );

  db_create_table($ret, 'curlypage_languages', $curlypage_languages_table);
  db_create_table($ret, 'curlypage_roles', $curlypage_roles_table);

  // add current curlypages values to new tables
  $result = db_query("SELECT cpid, languages, roles FROM {curlypages}");
  while ($curlypage = db_fetch_object($result)) {
    $languages = array_filter(explode(',', $curlypage->languages));
    $roles = array_filter(explode(',', $curlypage->roles));
    foreach ($languages as $language) {
      $ret[] = update_sql("INSERT INTO {curlypage_languages} (cpid, language) VALUES ($curlypage->cpid, '$language')");
    }
    foreach ($roles as $role) {
      $ret[] = update_sql("INSERT INTO {curlypage_roles} (cpid, rid) VALUES ($curlypage->cpid, $role)");
    }
  }

  // drop languages and roles fields
  db_drop_field($ret, 'curlypages', 'languages');
  db_drop_field($ret, 'curlypages', 'roles');

  return $ret;
}

function curlypage_update_2303() {
  $ret = array();
  db_add_field($ret, 'curlypages', 'curlypage_group', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'description' => 'Curlypage group (0 - 100).'));
  db_add_field($ret, 'curlypages', 'delay', array('type' => 'int', 'size' => 'normal', 'not null' => TRUE, 'default' => 0, 'description' => 'Delay seconds (0 - 999).'));
  db_add_field($ret, 'curlypages', 'time_slot', array('type' => 'int', 'size' => 'normal', 'not null' => TRUE, 'default' => 0, 'description' => 'Time Slot seconds (0 - 999).'));
  db_add_field($ret, 'curlypages', 'repeat_times', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 1, 'description' => 'Repeat times (0 - 9).'));
  return $ret;
}

function curlypage_update_2304() {

  $ret = array();

  // create new table curlypage_node_types
  $curlypage_node_types_table = array(
    'description' => 'Sets up display criteria for curlypages based on content types',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.cpid.",
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => "The machine-readable name of this type from {node_type}.type.",
      ),
    ),
    'primary key' => array('cpid', 'type'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  db_create_table($ret, 'curlypage_node_types', $curlypage_node_types_table);

  return $ret;

}

function curlypage_update_2305() {
  $ret = array();
  db_add_field($ret, 'curlypages', 'open_onclick', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'description' => 'Open curlypage on click.'));
  return $ret;
}

function curlypage_update_2306() {
  $ret = array();
  $actual_value = variable_get('curlypage_external_swfobject', 1);
  if ($actual_value) {
    variable_set('curlypage_internal_swfobject', 0);
  }
  else {
    variable_set('curlypage_internal_swfobject', 1);
  }
  variable_del('curlypage_external_swfobject');
  return $ret;
}
