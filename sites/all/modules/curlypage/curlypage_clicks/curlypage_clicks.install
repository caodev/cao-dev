<?php
// $Id: curlypage_clicks.install,v 1.1.2.7.2.3 2010/06/17 10:23:31 manfer Exp $

/**
 * @file
 * Install and uninstall schema and functions for the curlypage clicks module.
 */

/**
 * Implementation of hook_schema().
 */
function curlypage_clicks_schema() {
  return array(
    'curlypage_clicks' => array(
      'description' => 'The main table to hold the curlypage clicks statistics data.',
      'fields' => array(
        'cpid' => array(
          'description' => 'The foreign key to curlypage.cpid',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'enabled' => array(
          'description' => 'Clicks track enabled for this curlypage',
          'type' => 'int',
          'not null' => TRUE,
          'size' => 'tiny',
          'default' => 0,
        ),
        'clicks' => array(
          'description' => 'Clicks count',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'views_open' => array(
          'description' => 'Open curlypage views count',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'views_close' => array(
          'description' => 'Close curlypage views count',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'max_views_open' => array(
          'description' => 'Max open curlypage views.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'max_views_close' => array(
          'description' => 'Max close curlypage views.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'primary key' => array('cpid'),
    ),
    'curlypage_clicks_detail' => array(
      'description' => 'The main table to hold the curlypage clicks detail statistics.',
      'fields' => array(
        'cpclid' => array(
          'description' => 'Unique curlypage clicks detail id',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'cpid' => array(
          'description' => 'The foreign key to curlypage.cpid',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'The foreign key to users.uid',
          'type' => 'int',
          'not null' => TRUE,
          'size' => 'tiny',
          'default' => 0,
        ),
        'link' => array(
          'description' => 'URL clicked.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'timestamp' => array(
          'description' => 'The timestamp when user clicked.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
      ),
      'primary key' => array('cpclid'),
    ),
  );
}

/**
 * Implementation of hook_install().
 */
function curlypage_clicks_install() {
  drupal_install_schema('curlypage_clicks');
}

/**
 * Implementation of hook_uninstall().
 */
function curlypage_clicks_uninstall() {
  drupal_uninstall_schema('curlypage_clicks');
}

/**
 * Implementation of hook_enable().
 */
function curlypage_clicks_enable() {

  // test if any curlypage have been deleted while curlypage clicks have been
  // disabled and delete those rows from curlypage_clicks and
  // curlypage_clicks_detail
  $result = db_query('SELECT cpcl.cpid FROM {curlypage_clicks} cpcl LEFT JOIN {curlypages} cp ON cpcl.cpid = cp.cpid WHERE cp.cpid IS NULL');

  while ($curlypage = db_fetch_object($result)) {

    db_query('DELETE FROM {curlypages_clicks} WHERE cpid = %d', array(':cpid' => $curlypage->cpid));
    db_query('DELETE FROM {curlypages_clicks_detail} WHERE cpid = %d', array(':cpid' => $curlypage->cpid));

  }

  // test if any curlypage have been added while curlypage clicks have been
  // disabled and insert those rows into curlypage_clicks
  $result = db_query('SELECT cp.cpid FROM {curlypages} cp LEFT JOIN {curlypage_clicks} cpcl ON cp.cpid = cpcl.cpid WHERE cpcl.cpid IS NULL');

  while ($curlypage = db_fetch_object($result)) {

    $sql = "INSERT INTO {curlypage_clicks} (cpid, enabled, clicks, views_open, views_close, max_views_open, max_views_close)";
    $sql .= " VALUES (%d, %d, %d, %d, %d, %d, %d)";
    db_query($sql,
      array(
        ':cpid' => $curlypage->cpid,
        ':enabled' => 0,
        ':clicks' => 0,
        ':views_open' => 0,
        ':views_close' => 0,
        ':max_views_open' => 0,
        ':max_views_close' => 0,
      ));

  }

}

/**
 * Implementation of hook_update_N().
 */
function curlypage_clicks_update_6301() {
  $ret = array();
  db_add_field($ret, 'curlypage_clicks', 'views', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Views count.'));
  return $ret;
}

function curlypage_clicks_update_6302() {
  $ret = array();
  db_add_field($ret, 'curlypage_clicks', 'views_open', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Open curlypage views count.'));
  db_change_field($ret, 'curlypage_clicks', 'views', 'views_close', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Close curlypage views count.'));

  return $ret;
}

function curlypage_clicks_update_6303() {
  $ret = array();
  db_add_field($ret, 'curlypage_clicks', 'max_views_open', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Max open curlypage views.'));
  db_add_field($ret, 'curlypage_clicks', 'max_views_close', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Max close curlypage views.'));
  return $ret;
}
