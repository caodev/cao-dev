<?php
// $Id: curlypage.module,v 1.2.2.8.2.11 2010/06/29 14:45:58 manfer Exp $

/**
 * @file
 * Shows configurable peel away ad (magic corner, peelad) to your website.
 *
 * Acknowledgement: Some of the code and way of doing things were borrowed from corner and block modules.
 */

define('CURLYPAGE_PATH_IMAGES', 'curlypage');
define('CURLYPAGE_TRACKING_CODE', 'LiPXZui3RT2i9rg2');

/**
 * Implementation of hook_help().
 */
function curlypage_help($path, $arg) {
  switch ($path) {
    case "admin/help#curlypage":
      $output  = '<p>';
      $output .= t("Add a peel away ad (magic corner, peelad) to your website.");
      $output .= '</p><p>';
      $output .= t("For a complete help visit the ");
      $output .= l(t('howto'), 'http://www.curlypage.co.cc/content/howto');
      $output .= t(" on curlypage homepage.");
      $output .= '</p>';
      break;
    case 'admin/modules#description':
      $output = t('Add a peel away ad (magic corner, peelad) to your website.');
      break;
    case 'admin/build/curlypage':
      $output = t('Curlypages are peelads which are shown at a \'corner\' of your pages. Create new curlypages on the <a href="!add_new">add curlypage page</a> or edit existing curlypages by clicking the <em>edit</em> link next to each one.', array('!add_new' => url('admin/build/curlypage/add')));
      break;
  }
  return $output;
}


/**
 * Implementation of hook_init().
 */
function curlypage_init() {

  $num_active = variable_get('num_enabled_curlypages', 0);
  $current_curlypages = array();

  // Add the JS only if we have any active curlypage.
  // Test if curlypages must be displayed in this node
  // and prepare to write them.
  // Exclude curlypage/*/click path
  if ($num_active && !drupal_match_path($_GET['q'], 'curlypage/*/click')) {

    // Fetch all active curlypages.
    // TODO: cache?
    $curlypages = array();

    // Build an array of languages for each curlypage.
    $curlypage_languages = array();
    $result = db_query('SELECT cpid, language FROM {curlypage_languages}');
    while ($record = db_fetch_object($result)) {
      $curlypage_languages[$record->cpid][] = $record->language;
    }

    // Build an array of roles for each curlypage.
    $curlypage_roles = array();
    $result = db_query('SELECT cpid, rid FROM {curlypage_roles}');
    while ($record = db_fetch_object($result)) {
      $curlypage_roles[$record->cpid][] = $record->rid;
    }

    // Build an array of node types for each curlypage.
    $curlypage_node_types = array();
    $result = db_query('SELECT cpid, type FROM {curlypage_node_types}');
    while ($record = db_fetch_object($result)) {
      $curlypage_node_types[$record->cpid][] = $record->type;
    }

    $query = db_rewrite_sql("SELECT * FROM {curlypages} cp WHERE status = 1 ORDER BY cp.weight ASC, cp.cpid ASC", 'cp', 'cpid');
    $result = db_query($query);

    while ($curlypage = db_fetch_object($result)) {
      $curlypages[$curlypage->cpid] = $curlypage;
    }

    // Allow submodules to add parameters to curlypages that are needed in js output.
    $modules = module_implements('curlypage_parameters');
    if (!empty($modules)) {
      foreach ($modules as $module) {
        $func = $module .'_curlypage_parameters';
        $func($curlypages);
      }
    }

    global $user;
    global $language;
    $rids = array_keys($user->roles);
    $lang_name = $language->language;

    // Curlypages for the current path/role/language.
    // If more than one are configured on same corner for this path/role/language,
    // only first would be presented.
    foreach ($curlypages as $curlypage) {

      // if a topleft curlypage is just set and on different group continue checking next curlypage
      if ($curlypage->peel_position == 'topleft' && isset($current_curlypages['topleft'][0]) && ($current_curlypages['topleft'][0]->curlypage_group == 0 || $current_curlypages['topleft'][0]->curlypage_group != $curlypage->curlypage_group) ) {
        continue;
      }

      // if a topright curlypage is just set and on different group continue checking next curlypage
      if ($curlypage->peel_position == 'topright' && isset($current_curlypages['topright']) && ($current_curlypages['topright'][0]->curlypage_group == 0 || $current_curlypages['topright'][0]->curlypage_group != $curlypage->curlypage_group) ) {
        continue;
      }

      // if a bottomleft curlypage is just set and on different group continue checking next curlypage
      if ($curlypage->peel_position == 'bottomleft' && isset($current_curlypages['bottomleft']) && ($current_curlypages['bottomleft'][0]->curlypage_group == 0 || $current_curlypages['bottomleft'][0]->curlypage_group != $curlypage->curlypage_group) ) {
        continue;
      }

      // if a bottomright curlypage is just set and on different group continue checking next curlypage
      if ($curlypage->peel_position == 'bottomright' && isset($current_curlypages['bottomright']) && ($current_curlypages['bottomright'][0]->curlypage_group == 0 || $current_curlypages['bottomright'][0]->curlypage_group != $curlypage->curlypage_group) ) {
        continue;
      }

      // Get language visibility settings
      $vis_languages = isset($curlypage_languages[$curlypage->cpid]) ? $curlypage_languages[$curlypage->cpid] : array();

      // Match languages
      // If curlypage has no languages associated, it is displayed for every language.
      // If curlypage has languages associated, if node language does not match the
      // settings from this curlypage, continue checking next curlypage.
      if (module_exists('locale') && $vis_languages && !in_array($lang_name, $vis_languages)) {
        continue;
      }

      // Get roles visibility settings
      $vis_roles_vis = $curlypage->roles_visibility;
      $vis_roles = isset($curlypage_roles[$curlypage->cpid]) ? $curlypage_roles[$curlypage->cpid] : array();

      // Match roles
      // - If curlypage has no roles associated, it is displayed for every role.
      // - If roles_visibility is 0 (show for selected), if none of the user's roles matches
      // the settings from this curlypage, continue checking next curlypage.
      // - If roles_visibility is 1 (show except for selected), if any of the user's roles
      // matches the settings from this curlypage, continue checking next curlypage.
      if ($vis_roles && ((!$vis_roles_vis && !array_intersect($vis_roles, $rids)) || ($vis_roles_vis && array_intersect($vis_roles, $rids)))) {
        continue;
      }

      // Get node type visibility settings
      $vis_node_types = isset($curlypage_node_types[$curlypage->cpid]) ? $curlypage_node_types[$curlypage->cpid] : NULL;

      // Match content type
      // If a curlypage has no node types associated, it is displayed for every type.
      // For curlypages with node types associated, if the node type does not match
      // the settings from this curlypage, continue checking next curlypage.
      if (isset($vis_node_types)) {
        $node = menu_get_object();
        if (!empty($node)) {
          // This is a node or node edit page.
          if (!in_array($node->type, $vis_node_types)) {
            // This curlypage should not be displayed for this node type.
            continue;
          }
        }
        elseif (arg(0) == 'node' && arg(1) == 'add' && in_array(arg(2), array_keys(node_get_types()))) {
          // This is a node creation page
          if (!in_array(arg(2), $vis_node_types)) {
            // This curlypage should not be displayed for this node type.
            continue;
          }
        }
        else {
          // This is not a node page, continue with next curlypage.
          continue;
        }
      }

      // Get pages visibility settings
      $vis_vis = $curlypage->visibility;
      $vis_pages = $curlypage->pages;

      // Match path if necessary
      if ($vis_pages) {
        if ($vis_vis < 2) {
          $path = drupal_get_path_alias($_GET['q']);
          // Compare with the internal and path alias (if any).
          $page_match = drupal_match_path($path, $vis_pages);
          if ($path != $_GET['q']) {
            $page_match = $page_match || drupal_match_path($_GET['q'], $vis_pages);
          }
          // When $vis_vis has a value of 0, the curlypage is displayed on
          // all pages except those listed in $vis_pages. When set to 1, it
          // is displayed only on those pages listed in $vis_pages.
          $page_match = !($vis_vis xor $page_match);
        }
        else {
          $page_match = drupal_eval($vis_pages);
        }
      }
      else {
        $page_match = TRUE;
      }

      // Generate curlypage, it has matched current path, role and language
      if ($page_match) {

        // Prepare the curlypage objects to adjust them to curlypage javascript needs
        switch ($curlypage->peel_position) {
          case 'topleft':
            $current_curlypages['topleft'][] = $curlypage;
            break;
          case 'topright':
            $current_curlypages['topright'][] = $curlypage;
            break;
          case 'bottomleft':
            $current_curlypages['bottomleft'][] = $curlypage;
            break;
          case 'bottomright':
            $current_curlypages['bottomright'][] = $curlypage;
            break;
          default:
            break;
        }

      }
    }

    // All enabled curlypages have been analyzed.
    // Write curlypages if any has matched this node.
    if ($current_curlypages) {
      write_curlypages($current_curlypages);
    }

  }

}

/**
 * Implementation of hook_perm().
 */
function curlypage_perm() {
  return array('administer curlypages', 'use PHP for curlypage visibility');
}

/**
 * Implementation of hook_menu().
 */
function curlypage_menu() {
  $items = array();
  $items['admin/build/curlypage'] = array(
    'title' => 'Curlypages',
    'description' => 'Edit curlypages, how they look and where they appear on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_list_form'),
    'access arguments' => array('administer curlypages'),
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/curlypage/add'] = array(
    'title' => 'Add curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_edit', NULL, 'add'),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/edit'] = array(
    'title' => 'Edit curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_edit', 3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/clone'] = array(
    'title' => 'Clone curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_edit', 3, 'clone'),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );
  $items['admin/build/curlypage/%curlypage/delete'] = array(
    'title' => 'Delete curlypage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_admin_delete', 3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
    'file' => 'curlypage.admin.inc',
  );
  $items['curlypage/%curlypage/click'] = array(
    'title' => 'Clicked',
    'page callback' => 'curlypage_click',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['curlypage/%curlypage/view'] = array(
    'title' => 'Viewed',
    'page callback' => 'curlypage_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/curlypage/settings'] = array(
    'title' => 'Settings',
    'description' => 'Curlypage global settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_settings'),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'curlypage.admin.inc',
  );

  return $items;
}

/**
 * Output curlypages.
 */
function write_curlypages($curlypages = array()) {

  // Output curlypages if there is at least one for current node
  if ($curlypages) {

    $path = drupal_get_path('module', 'curlypage');

    // load external swfobject.js library
    $internal_swfobject = variable_get('curlypage_internal_swfobject', 0);
    if ($internal_swfobject) {
      $swfobject_path = variable_get('curlypage_swfobject_path', $path .'/curlypage/swfobject.js');
      drupal_add_js($swfobject_path, 'module', 'header', FALSE, TRUE, TRUE);
    }
    else {
      $swfobjectjs = '<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js"></script>';
      drupal_set_html_head($swfobjectjs);
    }

    drupal_add_js($path .'/curlypage/curlypage.js', 'module', 'header', FALSE, TRUE, TRUE);
    drupal_add_css($path .'/curlypage/curlypage.css', 'module', 'all', TRUE);

    $flash_v10 = variable_get('curlypage_flash_v10', 0);
    $js = "flag_swf = '". $base_url . base_path() . drupal_get_path('module', 'curlypage') ."/curlypage/flag". ($flash_v10 ? "_flashV10" : "") .".swf';\n";
    $js .= "peel_swf = '". $base_url . base_path() . drupal_get_path('module', 'curlypage') ."/curlypage/turn". ($flash_v10 ? "_flashV10" : "") .".swf';\n";

    foreach ($curlypages as $corner => $corner_curlypages) {

      $js .= "curlypages['". $corner ."'] = new Array();\n";

      foreach ($corner_curlypages as $curlypage) {

        $curlypage = _curlypage_prepare($curlypage);

        $js .= "curlypage_vars = {\n";
        foreach ($curlypage as $key => $value) {
          $js .= $key .": ". drupal_to_js($value) .",\n";
        }
        $js = substr_replace($js, "", -2, 1);
        $js .= "};\n";

        $js .= "curlypage = new Curlypage(curlypage_vars);\n";
        $js .= "curlypages['". $curlypage->peel_position ."'].push(curlypage);\n";

      }

    }

    $js .= "$(document).ready(function() { curlypage_write_curlypages(); });\n";

    drupal_add_js($js, 'inline', 'footer');

  }

}

/**
 * Prepares a curlypage object prior to being use in JS.
 *
 * @param $curlypage A curlypage object
 * @return A prepared curlypage object
 */
function _curlypage_prepare($curlypage) {

  // No need to carry over these values to JS
  unset($curlypage->name);
  unset($curlypage->status);
  unset($curlypage->roles_visibility);
  unset($curlypage->visibility);
  unset($curlypage->pages);
  unset($curlypage->weight);
  unset($curlypage->curlypage_group);

  // Construct the image and sound paths
  // url not correct here as it would generate incorrect uris in multilanguage site
  $curlypage->wait_url        = base_path() . check_url($curlypage->wait_url);
  $curlypage->small_url       = urlencode(base_path() . check_url($curlypage->small_url));
  $curlypage->big_url         = urlencode(base_path() . check_url($curlypage->big_url));
  $curlypage->load_sound_url  = ($curlypage->load_sound_url == '') ? '' : urlencode(base_path() . check_url($curlypage->load_sound_url));
  $curlypage->open_sound_url  = ($curlypage->open_sound_url == '') ? '' : urlencode(base_path() . check_url($curlypage->open_sound_url));
  $curlypage->close_sound_url = ($curlypage->close_sound_url == '') ? '' : urlencode(base_path() . check_url($curlypage->close_sound_url));

  $curlypage->link = urlencode(url($curlypage->link));

  $curlypage->text_on_close_button = check_plain($curlypage->text_on_close_button);

  return $curlypage;

}

/**
 * Loading one, more or all curlypages.
 */
function curlypage_load($cpid = NULL) {
  static $curlypages;

  if (!is_array($curlypages)) {

    if (is_numeric($cpid)) {
      $curlypage = db_fetch_object(db_query("SELECT * FROM {curlypages} WHERE cpid = %d", array(':cpid' => $cpid)));
      return $curlypage;

    }
    else {
      $result = db_query("SELECT * FROM {curlypages} ORDER BY weight ASC");
      $curlypages = array();

      while ($curlypage = db_fetch_object($result)) {
        $curlypages[$curlypage->cpid] = $curlypage;
      }
    }
  }

  if (is_array($curlypages)) {

    if (is_numeric($cpid)) {
      return $curlypages[$cpid];
    }
    elseif (is_array($cpid)) {
      return array_intersect_key($curlypages, array_flip($cpid));
    }
    else {
      return $curlypages;
    }
  }
}

/**
 * Get default values of a new curlypage
 */
function curlypage_get_default() {

  $default = new stdClass();

  $default->cpid                   = 0;
  $default->weight                 = 0;
  $default->status                 = 0;
  $default->name                   = '';
  $default->flag_style             = 'style1';
  $default->peel_style             = 'style1';
  $default->peel_position          = 'topright';
  $default->peel_position_model    = 'absolute';
  $default->flag_width             = 100;
  $default->flag_height            = 100;
  $default->peel_width             = 500;
  $default->peel_height            = 500;
  $default->wait_enable            = 0;
  $default->wait_url               = drupal_get_path('module', 'curlypage') .'/curlypage/wait.gif';
  $default->wait_width             = 42;
  $default->wait_height            = 42;
  $default->small_url              = drupal_get_path('module', 'curlypage') .'/curlypage/small.jpg';
  $default->big_url                = drupal_get_path('module', 'curlypage') .'/curlypage/big.jpg';
  $default->mirror                 = 1;
  $default->in_transition          = 'none';
  $default->transition_duration    = 4;
  $default->peel_color             = 'custom';
  $default->peel_color_style       = 'gradient';
  $default->red_value              = 255;
  $default->green_value            = 255;
  $default->blue_value             = 255;
  $default->link_enabled           = 1;
  $default->link_target            = '_blank';
  $default->link                   = 'http://www.drupal.org/';
  $default->load_sound_url         = '';
  $default->open_sound_url         = '';
  $default->close_sound_url        = '';
  $default->flag_speed             = 4;
  $default->peel_speed             = 4;
  $default->automatic_open         = 0;
  $default->automatic_close        = 0;
  $default->close_button_enable    = 0;
  $default->text_on_close_button   = 'close';
  $default->close_red_value        = 255;
  $default->close_green_value      = 255;
  $default->close_blue_value       = 255;
  $default->roles_visibility       = 0;
  $default->visibility             = 0;
  $default->pages                  = '';
  $default->curlypage_group        = 0;
  $default->delay                  = 0;
  $default->time_slot              = 0;
  $default->repeat_times           = 1;
  $default->open_onclick           = 0;

  return (object) $default;

}

/**
 * Returns either an array of select options or, if a key is specified, the value for the specific key in the given array.
 *
 * @param $type
 * @param $key A key corresponding to a specific entry in one of the options arrays
 * @return mixed
 */
function curlypage_get_options($type, $key = '') {
  switch ($type) {
    case 'flag_style':
      $options = array(
        'style1' => t('Style') .' 1',
        'style2' => t('Style') .' 2',
        'style3' => t('Style') .' 3',
      );
      break;
    case 'peel_style':
      $options = array(
        'style1' => t('Style') .' 1',
        'style2' => t('Style') .' 2',
        'style3' => t('Style') .' 3',
      );
      break;
    case 'peel_position':
      $options = array(
        'topleft'     => t('Top left'),
        'topright'    => t('Top right'),
        'bottomleft'  => t('Bottom left'),
        'bottomright' => t('Bottom right'),
      );
      break;
    case 'peel_position_model':
      $options = array(
        'absolute'  => t('absolute'),
        'fixed'     => t('fixed'),
      );
      break;
    case 'in_transition':
      $options = array(
        'none'          => t('(disabled)'),
        'Blinds'        => t('Blinds'),
        'Fade'          => t('Fade'),
        'Fly'           => t('Fly'),
        'Iris'          => t('Iris'),
        'Photo'         => t('Photo'),
        'Rotate'        => t('Rotate'),
        'Squeeze'       => t('Squeeze'),
        'Wipe'          => t('Wipe'),
        'PixelDissolve' => t('PixelDissolve'),
        'Zoom'          => t('Zoom')
      );
      break;
    case 'peel_color':
      $options = array(
        'golden' => t('Golden'),
        'silver' => t('Silver'),
        'custom' => t('Custom'),
      );
      break;
    case 'peel_color_style':
      $options = array(
        'flat'     => t('Flat'),
        'gradient' => t('Gradient'),
      );
      break;
    case 'link_target':
      $options = array(
        '_self'  => t('Same window'),
        '_blank' => t('New window'),
      );
      break;
    case 'roles_visibility':
      $options = array(
        0 => t('Show for each selected role.'),
        1 => t('Show except for the selected roles.'),
      );
      break;
    case 'curlypage_group':
      $options = array(
        0 => t('None'),
      );
      for ($i=1; $i<=100; $i++) {
        $options[$i] = t('Group') .' '. $i;
      }
      break;
    default:
      $options = array();
  }

  if ($key == '') {
    return $options;
  }
  else {
    return $options[$key];
  }
}

/**
 * Implementation of hook_theme().
 */
function curlypage_theme() {
  return array(
    'curlypage_list_form' => array('arguments' => array('form' => NULL)),
  );
}

/**
 * Menu callback: click event handler.
 */
function curlypage_click($curlypage) {
  $source = $_POST['source'];
  if ($source == CURLYPAGE_TRACKING_CODE) {
    module_invoke_all("curlypage_click", $curlypage);
  }
  echo 'OK';
}

/**
 * Menu callback: curlypage view event handler.
 */
function curlypage_view($curlypage) {
  $source = $_POST['source'];
  $status = $_POST['status'];
  if ($source == CURLYPAGE_TRACKING_CODE) {
    module_invoke_all("curlypage_view", $curlypage, $status);
  }
  echo 'OK';
}

function curlypage_curlypage_enable($cpid) {
  db_query("UPDATE {curlypages} SET status = 1 WHERE cpid = %d", array(':cpid' => $cpid));
  variable_set('num_enabled_curlypages', variable_get('num_enabled_curlypages', 0) + 1);
}

function curlypage_curlypage_disable($cpid) {
  db_query("UPDATE {curlypages} SET status = 0 WHERE cpid = %d", array(':cpid' => $cpid));
  variable_set('num_enabled_curlypages', variable_get('num_enabled_curlypages', 1) - 1);
}
